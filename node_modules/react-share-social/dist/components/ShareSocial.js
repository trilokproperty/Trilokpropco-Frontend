"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShareSocial = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const material_1 = require("@mui/material");
const styles_1 = require("@mui/styles");
const react_1 = __importStar(require("react"));
const react_share_1 = require("react-share");
const useStyles = (0, styles_1.makeStyles)({
    container: {
        position: "relative",
        background: "white",
        color: "#000",
        /* width: 100%, */
        maxWidth: "568px",
        height: "auto",
        padding: "30px",
        outline: "none",
        minWidth: "250px",
    },
    title: {
        textAlign: "left",
        fontFamily: "Apple SD Gothic Neo",
        fontStyle: "normal",
        fontWeight: 800,
        fontSize: "20px",
        lineHeight: "24px",
    },
    iconContainer: {
        /* width: 50%, */
        /* margin: auto, */
        /* margin-bottom: 1.5rem, */
        paddingTop: "20px",
        paddingBottom: "15px",
        textAlign: "left",
        "& button": {
            flex: "1 1 auto",
            border: "none",
            textAlign: "center",
            margin: "5px",
        },
    },
    closeImg: {
        position: "absolute",
        display: "flex",
        top: "20px",
        right: "20px",
        height: "50px",
        width: "50px",
        alignItems: "flex-start",
        justifyContent: "flex-end",
        zIndex: 9,
        "&:hover": {
            cursor: "pointer",
        },
    },
    copyContainer: {
        position: "relative",
        padding: "14px",
        border: "1px solid grey",
        color: "#263238",
        cursor: "text",
        display: "inline-flex",
        fontSize: "14px",
        boxSizing: "border-box",
        alignItems: "center",
        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
        letterSpacing: "-0.05px",
        width: "100%",
        fontStyle: "normal",
        fontWeight: "normal",
        background: "black",
        borderRadius: "4px",
        /* identical to box height, or 143% */
    },
    copyUrl: {
        color: "white",
        maxWidth: "calc(100% - 55px)",
        overflowX: "auto",
        fontSize: "16px",
        lineHeight: "24px",
        whiteSpace: "nowrap",
    },
    copyIcon: {
        width: "auto",
        position: "absolute",
        right: "0px",
        color: "#0C66FF",
        fontWeight: "bold",
        "& p": {
            paddingRight: "15px",
            paddingLeft: "15px",
        },
        "&:hover": {
            cursor: "pointer",
        },
    },
    modalStyle: {
        outline: "none",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        "&:focus": {
            outline: "none",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            border: "none",
        },
        "&:hover": {
            border: "none",
            outline: "none",
        },
    },
});
const components = {
    facebook: {
        Button: react_share_1.FacebookShareButton,
        Icon: react_share_1.FacebookIcon,
    },
    twitter: {
        Button: react_share_1.TwitterShareButton,
        Icon: react_share_1.TwitterIcon,
    },
    reddit: {
        Button: react_share_1.RedditShareButton,
        Icon: react_share_1.RedditIcon,
    },
    hatena: {
        Button: react_share_1.HatenaShareButton,
        Icon: react_share_1.HatenaIcon,
    },
    instapaper: {
        Button: react_share_1.InstapaperShareButton,
        Icon: react_share_1.InstapaperIcon,
    },
    line: {
        Button: react_share_1.LineShareButton,
        Icon: react_share_1.LineIcon,
    },
    linkedin: {
        Button: react_share_1.LinkedinShareButton,
        Icon: react_share_1.LinkedinIcon,
    },
    livejournal: {
        Button: react_share_1.LivejournalShareButton,
        Icon: react_share_1.LivejournalIcon,
    },
    mailru: {
        Button: react_share_1.MailruShareButton,
        Icon: react_share_1.MailruIcon,
    },
    ok: { Button: react_share_1.OKShareButton, Icon: react_share_1.OKIcon },
    whatsapp: {
        Button: react_share_1.WhatsappShareButton,
        Icon: react_share_1.WhatsappIcon,
    },
    pinterest: {
        Button: react_share_1.PinterestShareButton,
        Icon: react_share_1.PinterestIcon,
    },
    email: {
        Button: react_share_1.EmailShareButton,
        Icon: react_share_1.EmailIcon,
    },
    viber: {
        Button: react_share_1.ViberShareButton,
        Icon: react_share_1.ViberIcon,
    },
    telegram: {
        Button: react_share_1.TelegramShareButton,
        Icon: react_share_1.TelegramIcon,
    },
    workspace: {
        Button: react_share_1.WorkplaceShareButton,
        Icon: react_share_1.WorkplaceIcon,
    },
};
function ShareSocial(props) {
    const classes = useStyles();
    const [isCopied, setIsCopied] = (0, react_1.useState)(false);
    const { title, socialTypes = ["facebook", "twitter"], style, url, onSocialButtonClicked = () => { }, } = props;
    const copyToClipboard = (text) => {
        if (navigator && navigator.clipboard)
            navigator.clipboard
                .writeText(text)
                .then(() => {
                setIsCopied(true);
            })
                .catch((error) => {
                alert(`Copy failed! ${error}`);
            });
    };
    function getComponent(type) {
        const { Button, Icon } = components[type];
        return ((0, jsx_runtime_1.jsx)(material_1.Tooltip, Object.assign({ title: type || "", placement: "top" }, { children: (0, jsx_runtime_1.jsx)(Button, Object.assign({ url: url, quote: title, onClick: () => onSocialButtonClicked(type) }, { children: (0, jsx_runtime_1.jsx)(Icon, { size: 40, round: true }) })) })));
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: classes.container, style: style === null || style === void 0 ? void 0 : style.root, "data-testid": "root" }, { children: [title && ((0, jsx_runtime_1.jsx)("h1", Object.assign({ className: classes.title, style: style === null || style === void 0 ? void 0 : style.title, "data-testid": "title" }, { children: title }))), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: classes.iconContainer, style: style === null || style === void 0 ? void 0 : style.iconContainer }, { children: Array.isArray(socialTypes) &&
                    socialTypes.map((type, idx) => ((0, jsx_runtime_1.jsx)(react_1.default.Fragment, { children: getComponent(type) }, "social_item_" + idx))) })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: classes.copyContainer, style: style === null || style === void 0 ? void 0 : style.copyContainer }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: classes.copyUrl, style: style === null || style === void 0 ? void 0 : style.copyUrl, "data-testid": "url" }, { children: url })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: classes.copyIcon, style: style === null || style === void 0 ? void 0 : style.copyIcon, "data-testid": "copy-btn", onClick: () => copyToClipboard(url) }, { children: (0, jsx_runtime_1.jsxs)("p", { children: [" ", isCopied ? "Copied" : "Copy", " "] }) }))] }))] })));
}
exports.ShareSocial = ShareSocial;
